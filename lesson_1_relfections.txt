1) How did viewing a diff between two versions of a file help you see the bug that was introduced?

Having a program compare two versions of a file that has over a 1,000 lines of code is a lot easier and less time consuming to trace down differences that might be causing issues.
You would spend a lot more time and energy manually going through each line of code on each version.

2) How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

- If a file gets changed and is causing a program to fail or have different before, you can compare to a working version
- If a file gets deleted, you have a backup

3) What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

PROS: You choose what is the right size to make a commit. Every case can be different, if you need to commit more often you can.

CONS: Human error where someone can commit too often or too little.

4) Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Google Docs are usually documents that have a 1 to 1 relationship, changes in a word doc doesn't necessarily mean a change will be made to an excel or powerpoint doc.

However Git deals with more coding files where changes to code can affect multiple files and will need to commit all change files together.

5) How can you use the commands git log and git diff to view the history of files?

git log shows every change with an ID and the brief summary of the change that the user sets. You can view the more detailed change(s) between to files by using git diff between two files by their ID's

6) How might using version control make you more confident to make changes that could break something?

If I do make changes that breaks something, even if I'm not aware of the breaks and I make even more changes, I can view the behavior of my code at each stage that I commited a change. This would be a way to troubleshoot and figure out which version the break occured in. From there, I can do a git diff to compare a working version and the broken version to figure out what exactly caused the break to happen.

7) Now that you have your workspace set up, what do you want to try using Git for?

I started this course of the ultimate goal of wanting to learn how to have version control via Github on cloud based system where I could use my code on seperate computers (desktop to laptop). However, I have learned a lot of useful things already in the course by using Git. Having the ability to compare files, view logs and even run my programs of pervious are all excellent tools for troubleshooting future issues.