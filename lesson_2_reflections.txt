1) What happens when you initialize a repository? Why do you need to do it?

An empty repository is created. If the user runs 'git status' it will see that no commits are created yet and shows the untracked files.

2) How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is a middle stage when you've added files to be commited, but has not been committed to make a repository. It gives the user the optortunity to reset a committed file, or add another file, before making a repository.

3) How can you use the staging area to make sure you have one commit per logical change?

You can use the staging area to commit mulitple files, making it easy to make one commit per logical change.

4) What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If what to fix a bug off of a different version, not to introduce another bug to the working version. Usually work teams have their own branch and can merge changes back into the master branch.

5) How do the diagrams help you visualize the branch structure?

Diagrams help to show the timeline when commits branch off into different branches and commits. 

6) What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is taking code from one branch into a second branch, usually a master branch. It is represented in the diagram to think of situations where it's ok to merge two branches and when it's not ok to merge two branches.

7) What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Auto Merging Pros:
- Saves time
- Easy to do with few git commands
- Reads merging conflicts

Auto Merging Cons: 
- Doesn't know how to fix merging conflict

Manual Merging Pros:
- Can confirm there is no merging conflicts

Manul Merging Cons:
- Time consuming 